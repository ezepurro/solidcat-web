---
const { t } = Astro.props;

interface testimonialItem {
    author: string,
    business: string,
    country: string,
    rating: number,
    text: string,
    imageUrl: string
}

const getStars = (rating: number) => {
    const fullStars = Math.floor(rating);
    const hasHalfStar = rating % 1 !== 0;
    const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

    return `${"★".repeat(fullStars)}${hasHalfStar ? "☆" : ""}${"☆".repeat(emptyStars)}`;
};
---

<section class="h-auto flex items-center justify-center p-4 md:p-10 border max-w-screen-xl mx-auto mb-10 bg-linear-to-b from-black to-solidcat-primary">
    <div class="w-full">
        <div class="px-4">
            <h2 class="md:font-semibold text-xl">{t.title}</h2>
            <h3 class="text-paragraph font-extralight">{t.subtitle}</h3>
        </div>
        <div class="mt-10 flex flex-wrap gap-10 justify-center">
            {
                t.testimonials.map((item:testimonialItem) => (
                <article class="border w-full md:w-[45%] flex flex-col md:flex-row items-center md:items-start gap-2 shadow-lg shadow-[#ffffff5b] relative">
                    <div class="md:w-1/2 w-full md:h-auto h-50 overflow-hidden">
                        <img src={item.imageUrl} alt={item.author} class="w-full h-full object-cover">
                    </div>
                    
                    <div class="w-full md:w-1/2 p-4">
                        <h5 class="text-xl font-extrabold leading-tight">{item.author}</h5>
                        <p class="text-xs font-light leading-tight">{item.business}, {item.country}</p>
                        <p class="text-yellow-400 text-lg mb-3">{getStars(item.rating)}</p>
                        <p class="text-paragraph font-light mt-2 leading-tight">{item.text}</p>
                    </div>
                </article>
                ))
            }
        </div>
    </div>
</section>